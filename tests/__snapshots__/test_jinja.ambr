# serializer version: 1
# name: test_context_rendering
  '''
  context:
    name: "foo"
    version: "bla"
    name_version: foo-bla
  
  package:
    name: foo
    version: bla
  
  build:
    string: ${{ blas_variant }}${{ hash }}_foo-bla
  
  '''
# ---
# name: test_context_rendering.1
  '''
    - context:
        version: 5.1.0
  
      package:
        name: jolt-physics
        version: 5.1.0
  
      source:
        url: https://github.com/jrouwe/JoltPhysics/archive/refs/tags/v5.1.0.zip
        sha256: 10fcc863ae2b9d48c2f22d8b0204034820e57a55f858b7c388ac9579d8cf4095
  
      requirements:
        build:
          - cxx_compiler_stub
          - c_stdlib_stub
          - cmake
          - ninja
  
      build:
        number: 0
        script:
          - if: win
            then: |
              cmake -GNinja ^
                  %CMAKE_ARGS% ^
                  -DCMAKE_INSTALL_PREFIX=%LIBRARY_PREFIX% ^
                  -DBUILD_SHARED_LIBS=ON ^
                  -DCMAKE_BUILD_TYPE=Distribution ^
                  -DCROSS_PLATFORM_DETERMINISTIC=ON ^
                  -DTARGET_VIEWER=OFF ^
                  -DTARGET_SAMPLES=OFF ^
                  -DTARGET_HELLO_WORLD=OFF ^
                  -DTARGET_UNIT_TESTS=OFF ^
                  -DTARGET_PERFORMANCE_TEST=OFF ^
                  -S %SRC_DIR%\Build
              cmake --build . --target install
            else: |
              cmake -GNinja \
                  $CMAKE_ARGS \
                  -DCMAKE_INSTALL_PREFIX=$PREFIX \
                  -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_BUILD_TYPE=Distribution \
                  -DCROSS_PLATFORM_DETERMINISTIC=ON \
                  -DTARGET_VIEWER=OFF \
                  -DTARGET_SAMPLES=OFF \
                  -DTARGET_HELLO_WORLD=OFF \
                  -DTARGET_UNIT_TESTS=OFF \
                  -DTARGET_PERFORMANCE_TEST=OFF \
                  -S $SRC_DIR/Build
              cmake --build . --target install
  
      about:
        homepage: https://github.com/jrouwe/JoltPhysics
        license: MIT
        license_file: LICENSE
        summary: A multi core friendly rigid body physics and collision detection library.
        description: A multi core friendly rigid body physics and collision detection library. Written in C++. Suitable for games and VR applications. Used by Horizon Forbidden West.
        documentation: https://jrouwe.github.io/JoltPhysics/
        repository: https://github.com/jrouwe/JoltPhysics
  
      extra:
        recipe-maintainers:
          - baszalmstra
    - context:
        version: 5.1.0
  
      package:
        name: jolt-physics
        version: 5.1.0
  
      source:
        url: https://github.com/jrouwe/JoltPhysics/archive/refs/tags/v5.1.0.zip
        sha256: 10fcc863ae2b9d48c2f22d8b0204034820e57a55f858b7c388ac9579d8cf4095
  
      requirements:
        build:
          - cxx_compiler_stub
          - c_stdlib_stub
          - cmake
          - ninja
  
      build:
        number: 0
        script:
          - if: win
            then: |
              cmake -GNinja ^
                  %CMAKE_ARGS% ^
                  -DCMAKE_INSTALL_PREFIX=%LIBRARY_PREFIX% ^
                  -DBUILD_SHARED_LIBS=ON ^
                  -DCMAKE_BUILD_TYPE=Distribution ^
                  -DCROSS_PLATFORM_DETERMINISTIC=ON ^
                  -DTARGET_VIEWER=OFF ^
                  -DTARGET_SAMPLES=OFF ^
                  -DTARGET_HELLO_WORLD=OFF ^
                  -DTARGET_UNIT_TESTS=OFF ^
                  -DTARGET_PERFORMANCE_TEST=OFF ^
                  -S %SRC_DIR%\Build
              cmake --build . --target install
            else: |
              cmake -GNinja \
                  $CMAKE_ARGS \
                  -DCMAKE_INSTALL_PREFIX=$PREFIX \
                  -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_BUILD_TYPE=Distribution \
                  -DCROSS_PLATFORM_DETERMINISTIC=ON \
                  -DTARGET_VIEWER=OFF \
                  -DTARGET_SAMPLES=OFF \
                  -DTARGET_HELLO_WORLD=OFF \
                  -DTARGET_UNIT_TESTS=OFF \
                  -DTARGET_PERFORMANCE_TEST=OFF \
                  -S $SRC_DIR/Build
              cmake --build . --target install
  
      about:
        homepage: https://github.com/jrouwe/JoltPhysics
        license: MIT
        license_file: LICENSE
        summary: A multi core friendly rigid body physics and collision detection library.
        description: A multi core friendly rigid body physics and collision detection library. Written in C++. Suitable for games and VR applications. Used by Horizon Forbidden West.
        documentation: https://jrouwe.github.io/JoltPhysics/
        repository: https://github.com/jrouwe/JoltPhysics
  
      extra:
        recipe-maintainers:
          - baszalmstra
    - context:
        version: 5.1.0
  
      package:
        name: jolt-physics
        version: 5.1.0
  
      source:
        url: https://github.com/jrouwe/JoltPhysics/archive/refs/tags/v5.1.0.zip
        sha256: 10fcc863ae2b9d48c2f22d8b0204034820e57a55f858b7c388ac9579d8cf4095
  
      requirements:
        build:
          - cxx_compiler_stub
          - c_stdlib_stub
          - cmake
          - ninja
  
      build:
        number: 0
        script:
          - if: win
            then: |
              cmake -GNinja ^
                  %CMAKE_ARGS% ^
                  -DCMAKE_INSTALL_PREFIX=%LIBRARY_PREFIX% ^
                  -DBUILD_SHARED_LIBS=ON ^
                  -DCMAKE_BUILD_TYPE=Distribution ^
                  -DCROSS_PLATFORM_DETERMINISTIC=ON ^
                  -DTARGET_VIEWER=OFF ^
                  -DTARGET_SAMPLES=OFF ^
                  -DTARGET_HELLO_WORLD=OFF ^
                  -DTARGET_UNIT_TESTS=OFF ^
                  -DTARGET_PERFORMANCE_TEST=OFF ^
                  -S %SRC_DIR%\Build
              cmake --build . --target install
            else: |
              cmake -GNinja \
                  $CMAKE_ARGS \
                  -DCMAKE_INSTALL_PREFIX=$PREFIX \
                  -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_BUILD_TYPE=Distribution \
                  -DCROSS_PLATFORM_DETERMINISTIC=ON \
                  -DTARGET_VIEWER=OFF \
                  -DTARGET_SAMPLES=OFF \
                  -DTARGET_HELLO_WORLD=OFF \
                  -DTARGET_UNIT_TESTS=OFF \
                  -DTARGET_PERFORMANCE_TEST=OFF \
                  -S $SRC_DIR/Build
              cmake --build . --target install
  
      about:
        homepage: https://github.com/jrouwe/JoltPhysics
        license: MIT
        license_file: LICENSE
        summary: A multi core friendly rigid body physics and collision detection library.
        description: A multi core friendly rigid body physics and collision detection library. Written in C++. Suitable for games and VR applications. Used by Horizon Forbidden West.
        documentation: https://jrouwe.github.io/JoltPhysics/
        repository: https://github.com/jrouwe/JoltPhysics
  
      extra:
        recipe-maintainers:
          - baszalmstra
  
  '''
# ---
# name: test_render_recipe_with_context
  '''
  # yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
  
  context:
    name: mamba
    libmamba_version: "1.5.8"
    libmambapy_version: "1.5.8"
    mamba_version: "1.5.8"
    release: "2024.03.25"
    build_number: 2
  
  recipe:
    name: mamba-split
    version: 1.5.8
  
  source:
    url: https://github.com/mamba-org/mamba/archive/refs/tags/2024.03.25.tar.gz
    sha256: 6ddaf4b0758eb7ca1250f427bc40c2c3ede43257a60bac54e4320a4de66759a6
  
  build:
    number: 2
  
  outputs:
    - package:
        name: libmamba
        version: 1.5.8
      build:
        script:
          - build_mamba.sh
          - 
      requirements:
        build:
          - cxx_compiler_stub
          - cmake
          - ninja
          - 
        host:
          - libsolv >=0.7.23
          - libcurl >=8.4.0
          - fmt
          - 
        run:
          - libsolv >=0.7.23
        run_exports:
          - subpackage_pin libmamba
        ignore_run_exports:
          by_name:
            - spdlog
            - python
      tests:
        - script:
            - if: unix
              then:
                - test -d ${PREFIX}/include/mamba # [unix]
              else:
                - if not exist %LIBRARY_PREFIX%\include\mamba\version.hpp (exit 1) # [win]
  
    - package:
        name: libmambapy
        version: 1.5.8
      build:
        script:
          - build_mamba.sh
          - 
        # string: py_suppython_version_to_build_stringh${{ hash }}_2
      requirements:
        build:
          - cxx_compiler_stub
          - cmake
          - ninja
          - if: build_platform != target_platform
            then:
              - python
              - cross-python_linux-64
              - pybind11
              - pybind11-abi
        host:
          - python
          - nlohmann_json
          - subpackage_pin libmamba
        run:
          - python
          - subpackage_pin libmamba
        run_exports:
          - subpackage_pin libmambapy
        ignore_run_exports:
          by_name:
            - spdlog
      tests:
        - python:
            imports:
              - libmambapy
              - libmambapy.bindings
        - script:
            - python -c "import libmambapy._version; assert libmambapy._version.__version__ == '1.5.8'"
  
    - package:
        name: mamba
        version: 1.5.8
      build:
        script:
          - build_mamba.sh
          - 
          - 
        string: pypython_version_to_build_stringh${{ hash }}_2
        python:
          entry_points:
            - mamba = mamba.mamba:main
      requirements:
        build:
          - if: build_platform != target_platform
            then:
              - python
              - cross-python_linux-64
        run:
          - python
          - conda >=23.9,<24
          - subpackage_pin libmambapy
  
      tests:
        - python:
            imports:
              - mamba
        - script:
            - mamba --help
          # for some reason tqdm doesn't have a proper colorama dependency so pip check fails
          # but that's completely unrelated to mamba
            - python -c "import mamba._version; assert mamba._version.__version__ == '1.5.8'"
  
            - if: linux
              then:
                - test -f ${PREFIX}/etc/profile.d/mamba.sh
              # these tests work when run on win, but for some reason not during conda build
                - mamba create -n test_py2 python=2.7 --dry-run
                - mamba install xtensor xsimd -c conda-forge --dry-run
            - if: unix
              then:
                - test -f ${PREFIX}/condabin/mamba
  
  about:
    homepage: https://github.com/mamba-org/mamba
    license: BSD-3-Clause
    license_file: LICENSE
    license_family: BSD
    summary: A fast drop-in alternative to conda, using libsolv for dependency resolution
    description: |
      # Mamba, the Fast Cross-Platform Package Manager
      env_"MY_ENV_VAR" 
      env_"MY_ENV_VAR" 
      env_exists_"MY_ENV_VAR" 
  
    repository: https://github.com/mamba-org/mamba
  
  '''
# ---
